using System.Globalization;
using System.Text;

namespace CoreLibrary.Utilities;

public static class StringExtensionMethodsUkrainian
{
    private static readonly HashSet<char> Exceptions = ['і', 'І', 'и', 'И'];
    private static readonly HashSet<char> SpanishExceptions = ['u', 'i'];
    private static readonly HashSet<char> LatinCharacters = ['e', 'o', 'a', 's', 'l', 'z', 'c', 'n', 'E', 'O', 'A', 'S', 'L', 'Z', 'C', 'N'];

    /// <summary>
    /// Removes accent marks from a string - but only the accent marks I typically see in my Ukrainian flashcards deck; not all the diacritics.
    /// This method is supposed to RETAIN accents in Spanish, Polish and even some ukrainian characters where they are part of the word (like "ї").
    /// 
    /// Generated by ChatGPT, fixed for edge cases:
    /// - ї (we want to keep both dots ;))
    /// - й (we want to keep the character)
    /// </summary>
    public static string RemoveUkrainianFlashcardsAccentMark(this string inputString)
    {
        var normalizedString = inputString.Normalize(NormalizationForm.FormD);
        var stringBuilder = new StringBuilder();
        for (var i = 0; i < normalizedString.Length; i++)
        {
            var c = normalizedString[i];
            var lastCharacter = i > 0 ? normalizedString[i - 1] : '!';

            if (CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark ||
                LatinCharacters.Contains(lastCharacter) ||
                Exceptions.Contains(lastCharacter) && c == (char)774 || c == (char)776 ||
                SpanishExceptions.Contains(lastCharacter) && c == (char)769
               )
            {
                stringBuilder.Append(c);
            }
            // character is skipped!
            // good place for a breakpoint
        }
        return stringBuilder.ToString().Normalize(NormalizationForm.FormC);
    }
}
